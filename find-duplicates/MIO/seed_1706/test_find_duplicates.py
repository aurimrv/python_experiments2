# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import find_duplicates as module_0
import builtins as module_1


def test_case_0():
    str_0 = "pbqmBx(#&5xBCNx+!"
    var_0 = module_0.duplicates_linear(str_0, str_0)


def test_case_1():
    str_0 = "Pc=ZM/.\nL0/\r]p]\x0cUyL$"
    dict_0 = {str_0: str_0, str_0: str_0, str_0: str_0}
    var_0 = module_0.duplicates_linear(dict_0, str_0)


def test_case_2():
    str_0 = "&cRx1FQGz]WR2\n"
    var_0 = module_0.duplicates_pre_sorted(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_3():
    str_0 = "m"
    bytes_0 = b"\xcd\xbc\x96\xbf7"
    module_0.duplicates_pre_sorted(str_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bytes_0 = b"\xac\x9f\xde\x92\x81\x91\xb6}\x84\x02\xa1npy\x03\x03r\x9e\x03"
    bytes_1 = b"\x9f\xde\x92\x81\x91\xb6}\x84\x02\xa1npy\x03r\x9e\x03"
    var_0 = module_0.duplicates_pre_sorted(bytes_1, bytes_0)
    var_1 = module_0.duplicates_linear(var_0, var_0)
    module_0.duplicates_bin_search(bytes_0, bytes_0)


@pytest.mark.xfail(strict=True)
def test_case_5():
    bytes_0 = b"W[\xfc\x8e\xe9\xbb@gfA"
    bytes_1 = b"s[\xb9\xe6SV}"
    var_0 = module_0.duplicates_pre_sorted(bytes_0, bytes_1)
    var_1 = module_0.duplicates_pre_sorted(bytes_0, bytes_0)
    set_0 = {bytes_0, bytes_0}
    bool_0 = False
    object_0 = module_1.object(*var_0)
    module_0.duplicates_linear(bool_0, set_0)


@pytest.mark.xfail(strict=True)
def test_case_6():
    bytes_0 = b"\x1dh\x9c\xf0\xd3\xbe\xb7C\x19\xf5\xad\x9a\x81C"
    var_0 = module_0.duplicates_pre_sorted(bytes_0, bytes_0)
    var_1 = module_0.duplicates_linear(var_0, var_0)
    str_0 = ""
    var_2 = module_0.duplicates_pre_sorted(var_1, str_0)
    module_0.duplicates_bin_search(bytes_0, bytes_0)


def test_case_7():
    str_0 = ""
    var_0 = module_0.duplicates_pre_sorted(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_8():
    str_0 = "&cRx1FQGz]WR2\n"
    module_0.duplicates_bin_search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"\x1dh\x9c\xd3\xb7C\xf5\xad\x9a\x81C"
    module_0.duplicates_bin_search(bytes_0, bytes_0)


def test_case_10():
    str_0 = "$"
    var_0 = module_0.duplicates_bin_search(str_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_11():
    bytes_0 = b"\x17\x03\xda\x0b\xc9\xec\xf4'\xc6UP\xcd\xcf\xf3)\x14"
    str_0 = 's$`"BZ'
    module_0.duplicates_bin_search(bytes_0, str_0)


@pytest.mark.xfail(strict=True)
def test_case_12():
    complex_0 = -2514.5 - 3366j
    module_0.duplicates_bin_search(complex_0, complex_0)
