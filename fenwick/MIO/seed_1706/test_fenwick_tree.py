# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import fenwick_tree as module_0


def test_case_0():
    bytes_0 = b"\xdc,\x1e\xc3\x16%\xf4"
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, 220, 44, 30, 195, 22, 37, 244]
    assert fenwick_tree_0.tree == [0, 220, 264, 30, 489, 22, 59, 244]


def test_case_1():
    bytes_0 = b"<,\x1e\xc3\x80%\xf4"
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, 60, 44, 30, 195, 128, 37, 244]
    assert fenwick_tree_0.tree == [0, 60, 104, 30, 329, 128, 165, 244]
    bool_0 = False
    var_0 = fenwick_tree_0.sum_of_n(bool_0)
    assert var_0 == 60


def test_case_2():
    bytes_0 = b'\x14v\n"F\x86\x1b\xb3\xc4I'
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, 20, 118, 10, 34, 70, 134, 27, 179, 196, 73]
    assert fenwick_tree_0.tree == [0, 20, 138, 10, 182, 70, 204, 27, 592, 196, 269]
    int_0 = -1851
    var_0 = fenwick_tree_0.sum_of_range(int_0, int_0)
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_3():
    bytes_0 = b"bt:"
    fenwick_tree_0 = module_0.FenwickTree(bytes_0)
    assert (
        f"{type(fenwick_tree_0).__module__}.{type(fenwick_tree_0).__qualname__}"
        == "fenwick_tree.FenwickTree"
    )
    assert fenwick_tree_0.nums == [0, 98, 116, 58]
    assert fenwick_tree_0.tree == [0, 98, 214, 58]
    fenwick_tree_0.sum_of_range(fenwick_tree_0, fenwick_tree_0)
