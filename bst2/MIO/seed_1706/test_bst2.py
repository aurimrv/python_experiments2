# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import bst2 as module_0
import a_queue as module_1
import builtins as module_2


def test_case_0():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.delete(bst_0)
    assert bst_0.root is None


def test_case_1():
    bytes_0 = b"\x9c-]"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


def test_case_2():
    int_0 = -1295
    set_0 = {int_0, int_0, int_0}
    bst_0 = module_0.Bst(set_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


def test_case_3():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None


def test_case_4():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


def test_case_5():
    str_0 = 'YmG0b+H\rl"\r\r7]|:v?(~'
    bst_0 = module_0.Bst(str_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


def test_case_6():
    bytes_0 = b"U\x9b\x08\x0e2\x8d?\xfbk\xf2"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )


def test_case_7():
    str_0 = "Z^O\\o-O6"
    bst_0 = module_0.Bst(str_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.contains(str_0)
    assert var_0 is False


def test_case_8():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.search(bst_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "bst2.Node"
    assert f"{type(var_1.val).__module__}.{type(var_1.val).__qualname__}" == "bst2.Bst"
    assert var_1.right is None
    assert var_1.left is None
    assert var_1.parent is None
    assert var_1.height == 1


@pytest.mark.xfail(strict=True)
def test_case_9():
    bytes_0 = b"8\x8b\x96\xf9\x92\xdf6\xac"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    bst_0.contains(bst_0)


def test_case_10():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.contains(bst_0)
    assert var_0 is False


def test_case_11():
    bytes_0 = b"8\x8b\x96%r\xf9\x97\x92\xdf\x88\xac"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.depth()
    assert var_0 == 7


def test_case_12():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.depth()
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_13():
    bytes_0 = b"w\xf8\x99D\xb4\xf2.\xe3"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.balance()
    assert var_0 == -3
    var_0.peek()


def test_case_14():
    node_0 = module_0.Node()
    assert node_0.height == 1
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.balance(node_0)
    assert var_0 == 0


def test_case_15():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.balance()
    assert var_1 == 0


def test_case_16():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.balance()
    assert var_0 == 0


@pytest.mark.xfail(strict=True)
def test_case_17():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    bst_0.balance(bst_0)


def test_case_18():
    node_0 = module_0.Node()
    assert node_0.height == 1
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.pre_order(node_0)
    queue_0 = module_1.Queue(var_0)


def test_case_19():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.pre_order()
    queue_0 = module_1.Queue(var_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "a_queue.Queue"


@pytest.mark.xfail(strict=True)
def test_case_20():
    bytes_0 = b"\x8e\xf0"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.in_order()
    module_2.object(*var_0)


def test_case_21():
    node_0 = module_0.Node()
    assert node_0.height == 1
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.in_order()
    queue_0 = module_1.Queue(var_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "a_queue.Queue"


def test_case_22():
    str_0 = '_VM1"Py'
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(str_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.post_order()
    bst_1 = module_0.Bst(var_1)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_1.root).__module__}.{type(bst_1.root).__qualname__}" == "bst2.Node"
    )


def test_case_23():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.post_order()
    bst_1 = module_0.Bst(var_0)
    assert f"{type(bst_1).__module__}.{type(bst_1).__qualname__}" == "bst2.Bst"
    assert bst_1.root is None
    node_0 = module_0.Node(bst_1)
    assert node_0.height == 1
    node_1 = module_0.Node()
    assert node_1.height == 1


def test_case_24():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.insert(bst_0)
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_1 = bst_0.breadth_first()
    queue_0 = module_1.Queue(var_1)


def test_case_25():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.breadth_first()
    queue_0 = module_1.Queue(var_0)
    assert f"{type(queue_0).__module__}.{type(queue_0).__qualname__}" == "a_queue.Queue"


def test_case_26():
    bytes_0 = b"I\xe6\x94\nu\x0f\xcc\x17\xc6C\xb9)\xd3\xdc"
    bst_0 = module_0.Bst(bytes_0)
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert (
        f"{type(bst_0.root).__module__}.{type(bst_0.root).__qualname__}" == "bst2.Node"
    )
    var_0 = bst_0.size()
    assert var_0 == 14
    var_1 = bst_0.delete(var_0)
    node_0 = module_0.Node()
    assert node_0.height == 1


def test_case_27():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.delete(bst_0)


def test_case_28():
    node_0 = module_0.Node()
    assert node_0.height == 1


def test_case_29():
    bst_0 = module_0.Bst()
    assert f"{type(bst_0).__module__}.{type(bst_0).__qualname__}" == "bst2.Bst"
    assert bst_0.root is None
    var_0 = bst_0.size()
    assert var_0 == 0
