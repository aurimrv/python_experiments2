# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import linked_list1 as module_0


def test_case_0():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    var_0 = list_node_1.contains_cycle()
    assert var_0 is True


def test_case_1():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    list_node_2 = module_0.ListNode(list_0, list_node_1)
    var_0 = list_node_2.contains_cycle()
    assert var_0 is True


@pytest.mark.xfail(strict=True)
def test_case_2():
    list_0 = []
    list_1 = [list_0, list_0, list_0]
    list_node_0 = module_0.ListNode(list_0, list_1)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_1.contains_cycle()


def test_case_3():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0)
    list_node_1 = module_0.ListNode(none_type_0, list_node_0)
    var_0 = list_node_1.contains_cycle()
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_4():
    str_0 = "DZj-584\n,"
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0, str_0)
    list_node_0.contains_cycle()


def test_case_5():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    var_0 = list_node_0.contains_cycle()
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    list_0 = []
    none_type_0 = None
    list_node_0 = module_0.ListNode(list_0, none_type_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    var_0 = list_node_1.get_beginning_of_cycle_if_exists()
    var_0.reverse_recursive()


@pytest.mark.xfail(strict=True)
def test_case_7():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    list_node_2 = module_0.ListNode(list_0, list_node_1)
    list_node_2.get_beginning_of_cycle_if_exists()


@pytest.mark.xfail(strict=True)
def test_case_8():
    int_0 = -3195
    list_node_0 = module_0.ListNode(int_0, int_0)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    list_node_1.get_beginning_of_cycle_if_exists()


def test_case_9():
    none_type_0 = None
    list_node_0 = module_0.ListNode(none_type_0, none_type_0)
    list_node_1 = module_0.ListNode(list_node_0, list_node_0)
    var_0 = list_node_1.get_beginning_of_cycle_if_exists()


@pytest.mark.xfail(strict=True)
def test_case_10():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    list_node_1.get_beginning_of_cycle_if_exists()


def test_case_11():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    var_0 = list_node_0.get_beginning_of_cycle_if_exists()


def test_case_12():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    list_node_2 = module_0.ListNode(list_0, list_node_1)
    var_0 = list_node_2.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_1 = list_node_2.get_beginning_of_cycle_if_exists()


def test_case_13():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    var_0 = list_node_1.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )


def test_case_14():
    list_0 = []
    none_type_0 = None
    list_node_0 = module_0.ListNode(list_0, none_type_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    var_0 = list_node_1.reverse()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_0.next).__module__}.{type(var_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    var_1 = var_0.reverse()
    assert (
        f"{type(list_node_1.next).__module__}.{type(list_node_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_1.val == []
    assert (
        f"{type(var_1.next).__module__}.{type(var_1.next).__qualname__}"
        == "linked_list1.ListNode"
    )


def test_case_15():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    var_0 = list_node_0.reverse()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == []
    assert var_0.next is None


def test_case_16():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    list_node_1 = module_0.ListNode(list_0, list_node_0)
    var_0 = list_node_1.reverse_recursive()
    assert (
        f"{type(list_node_0.next).__module__}.{type(list_node_0.next).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert list_node_1.next is None
    var_1 = list_node_1.get_beginning_of_cycle_if_exists()


def test_case_17():
    list_0 = []
    list_node_0 = module_0.ListNode(list_0, list_0)
    var_0 = list_node_0.reverse_recursive()
    assert (
        f"{type(var_0).__module__}.{type(var_0).__qualname__}"
        == "linked_list1.ListNode"
    )
    assert var_0.val == []
    assert var_0.next == []


def test_case_18():
    str_0 = "DZj-584\n,"
    list_node_0 = module_0.ListNode(str_0)
