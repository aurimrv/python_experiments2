# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binheap as module_0


def test_case_0():
    bytes_0 = b"O\xf4\x1c\xd8\x14\x87\x95\x07\xd7[\x82\xcdx`Z"
    binheap_0 = module_0.Binheap(bytes_0)
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [
        None,
        244,
        216,
        205,
        215,
        130,
        149,
        135,
        7,
        79,
        20,
        91,
        28,
        120,
        96,
        90,
    ]


@pytest.mark.xfail(strict=True)
def test_case_1():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]
    module_0.Binheap(binheap_0)


def test_case_2():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]


def test_case_3():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]
    var_0 = binheap_0.push(binheap_0)


def test_case_4():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]
    with pytest.raises(IndexError):
        binheap_0.pop()


def test_case_5():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]
    var_0 = binheap_0.push(binheap_0)
    var_1 = binheap_0.display()


def test_case_6():
    bytes_0 = b"_\x14u\xceDun\xa2\x14\xdf\xbd\xc8o\xa5\x1b\x92I"
    binheap_0 = module_0.Binheap(bytes_0)
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [
        None,
        223,
        206,
        200,
        146,
        189,
        117,
        165,
        117,
        20,
        68,
        162,
        95,
        111,
        110,
        27,
        20,
        73,
    ]
    var_0 = binheap_0.display()
    assert (
        var_0
        == "        223 \n    206 200 \n  146 189 117 165 \n 117 20 68 162 95 111 110 27 \n20 73 \n"
    )


def test_case_7():
    bytes_0 = b"\xce\x87`"
    binheap_0 = module_0.Binheap(bytes_0)
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None, 206, 135, 96]
    var_0 = binheap_0.display()
    assert var_0 == " 206 \n135 96 \n"


def test_case_8():
    binheap_0 = module_0.Binheap()
    assert (
        f"{type(binheap_0).__module__}.{type(binheap_0).__qualname__}"
        == "binheap.Binheap"
    )
    assert binheap_0.container == [None]
    var_0 = binheap_0.display()
    assert var_0 == ""
