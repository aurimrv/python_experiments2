# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import linked_list2 as module_0


def test_case_0():
    str_0 = "%d0laE"
    linked_list_0 = module_0.LinkedList(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "linked_list2.Node"
    )


def test_case_1():
    tuple_0 = ()
    linked_list_0 = module_0.LinkedList(tuple_0)


def test_case_2():
    bool_0 = True
    linked_list_0 = module_0.LinkedList(bool_0)
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "linked_list2.Node"
    )


def test_case_3():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None


def test_case_4():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.pop()
    assert linked_list_0.head is None
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert var_1.head is None


def test_case_5():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    with pytest.raises(IndexError):
        linked_list_0.pop()


def test_case_6():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.search(linked_list_0)
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "linked_list2.Node"
    assert (
        f"{type(var_1.data).__module__}.{type(var_1.data).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert var_1.next is None


def test_case_7():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList(linked_list_0)
    assert (
        f"{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}"
        == "linked_list2.Node"
    )
    var_0 = linked_list_1.search(linked_list_1)


def test_case_8():
    str_0 = "%d0laE"
    linked_list_0 = module_0.LinkedList(str_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "linked_list2.Node"
    )
    var_0 = linked_list_0.search(linked_list_0)


def test_case_9():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.search(linked_list_0)


def test_case_10():
    bytes_0 = b"\x99_\x88\xc7l<+\xcc\xb0u\x84v\xa9\xaa\xb2\xd6\xd3@\x98"
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "linked_list2.Node"
    )
    var_0 = linked_list_0.remove(bytes_0)


def test_case_11():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.remove(var_0)


def test_case_12():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)
    var_1 = linked_list_0.remove(linked_list_0)
    assert linked_list_0.head is None


def test_case_13():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(linked_list_0)


def test_case_14():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.remove(linked_list_0)
    var_1 = linked_list_0.push(linked_list_0)
    var_2 = linked_list_0.push(linked_list_0)
    var_3 = linked_list_0.remove(linked_list_0)


def test_case_15():
    bytes_0 = b"s\xb6\x08:\x8f\xed\x00\xc4\xfa"
    linked_list_0 = module_0.LinkedList(bytes_0)
    assert (
        f"{type(linked_list_0.head).__module__}.{type(linked_list_0.head).__qualname__}"
        == "linked_list2.Node"
    )
    var_0 = linked_list_0.display()
    assert var_0 == "(250, 196, 0, 237, 143, 58, 8, 182, 115)"


def test_case_16():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    linked_list_1 = module_0.LinkedList(linked_list_0)
    assert (
        f"{type(linked_list_1.head).__module__}.{type(linked_list_1.head).__qualname__}"
        == "linked_list2.Node"
    )
    var_0 = linked_list_1.display()


def test_case_17():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.display()
    assert var_0 == ")"


def test_case_18():
    none_type_0 = None
    node_0 = module_0.Node(none_type_0)


def test_case_19():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.push(linked_list_0)


def test_case_20():
    linked_list_0 = module_0.LinkedList()
    assert (
        f"{type(linked_list_0).__module__}.{type(linked_list_0).__qualname__}"
        == "linked_list2.LinkedList"
    )
    assert linked_list_0.head is None
    var_0 = linked_list_0.size()
    assert var_0 == 0
