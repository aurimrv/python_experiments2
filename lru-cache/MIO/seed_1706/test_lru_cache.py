# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import lru_cache as module_0


def test_case_0():
    bool_0 = False
    with pytest.raises(ValueError):
        module_0.LruCache(bool_0)


def test_case_1():
    float_0 = 64.77743002518928
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(64.77743002518928, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0


def test_case_2():
    float_0 = 4.157058011379673
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(4.157058011379673, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0
    var_0 = lru_cache_0.put(lru_cache_0, lru_cache_0)
    assert len(lru_cache_0.lookup_map) == 1
    var_1 = lru_cache_0.get(var_0)
    assert var_1 == -1
    var_2 = lru_cache_0.put(var_1, var_0)
    assert len(lru_cache_0.lookup_map) == 2
    none_type_0 = None
    var_3 = lru_cache_0.put(float_0, none_type_0)
    assert len(lru_cache_0.lookup_map) == 3
    var_4 = lru_cache_0.put(none_type_0, var_3)
    assert len(lru_cache_0.lookup_map) == 4
    list_node_0 = module_0.ListNode(lru_cache_0, none_type_0)
    var_5 = lru_cache_0.put(list_node_0, list_node_0)


def test_case_3():
    float_0 = 771.0
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(771.0, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0
    var_0 = lru_cache_0.put(float_0, float_0)
    assert len(lru_cache_0.lookup_map) == 1


def test_case_4():
    float_0 = 97.89505903830766
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(97.89505903830766, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0
    var_0 = lru_cache_0.put(float_0, float_0)
    assert len(lru_cache_0.lookup_map) == 1
    var_1 = lru_cache_0.put(float_0, var_0)


def test_case_5():
    float_0 = 228.2648858529945
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(228.2648858529945, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0
    var_0 = lru_cache_0.get(float_0)
    assert var_0 == -1
    var_1 = lru_cache_0.put(var_0, var_0)
    assert len(lru_cache_0.lookup_map) == 1
    var_2 = lru_cache_0.get(var_0)
    assert var_2 == -1


def test_case_6():
    float_0 = 94.36155773192104
    lru_cache_0 = module_0.LruCache(float_0)
    assert (
        f"{type(lru_cache_0).__module__}.{type(lru_cache_0).__qualname__}"
        == "lru_cache.LruCache"
    )
    assert (
        f"{type(lru_cache_0.head).__module__}.{type(lru_cache_0.head).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert (
        f"{type(lru_cache_0.tail).__module__}.{type(lru_cache_0.tail).__qualname__}"
        == "lru_cache.ListNode"
    )
    assert lru_cache_0.lookup_map == {}
    assert lru_cache_0.capacity == pytest.approx(94.36155773192104, abs=0.01, rel=0.01)
    assert module_0.LruCache.terminal_value == 0
    var_0 = lru_cache_0.get(lru_cache_0)
    assert var_0 == -1


def test_case_7():
    str_0 = "E;,\x0b}rO\n>"
    list_node_0 = module_0.ListNode(str_0, str_0)
