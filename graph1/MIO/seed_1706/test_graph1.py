# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph1 as module_0


def test_case_0():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(bool_0, bool_0)
    assert graph_0.graph == {True: [True]}
    var_1 = graph_0.add_edge(bool_0, var_0)
    assert graph_0.graph == {True: [True, None], None: []}


def test_case_1():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(bool_0, graph_0)
    assert len(graph_0.graph) == 2


def test_case_2():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(graph_0, graph_0)
    assert len(graph_0.graph) == 1


def test_case_3():
    float_0 = -3077.043826
    graph_0 = module_0.Graph(float_0)
    with pytest.raises(IndexError):
        graph_0.add_edge(float_0, float_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    graph_0.has_cycle()


def test_case_5():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.has_cycle()
    assert var_0 is False


@pytest.mark.xfail(strict=True)
def test_case_6():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    bool_1 = False
    var_0 = graph_0.add_edge(graph_0, bool_1)
    assert len(graph_0.graph) == 2
    var_1 = graph_0.has_cycle()
    assert var_1 is False
    var_1.add_adjacent(bool_0)


def test_case_7():
    bool_0 = True
    graph_0 = module_0.Graph(bool_0)
    bool_1 = False
    var_0 = graph_0.add_edge(bool_1, bool_1)
    assert graph_0.graph == {False: [False]}
    var_1 = graph_0.has_cycle()
    assert var_1 is True


def test_case_8():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(bool_0, bool_0)
    assert graph_0.graph == {False: [False]}
    var_1 = graph_0.topological_sort()


def test_case_9():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.add_edge(bool_0, graph_0)
    assert len(graph_0.graph) == 2
    var_1 = graph_0.topological_sort()


def test_case_10():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)
    var_0 = graph_0.topological_sort()


@pytest.mark.xfail(strict=True)
def test_case_11():
    bool_0 = False
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_edge(bool_0, bool_0)
    var_1 = weighted_graph_0.__str__()
    assert var_1 == "False adjacent: [False]"
    var_0.add_edge(bool_0, bool_0, bool_0)


def test_case_12():
    none_type_0 = None
    weighted_graph_node_0 = module_0.WeightedGraphNode(none_type_0)
    var_0 = weighted_graph_node_0.__str__()
    assert var_0 == "None adjacent: []"


@pytest.mark.xfail(strict=True)
def test_case_13():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_vertex(weighted_graph_0)
    weighted_graph_0.__str__()


def test_case_14():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.__str__()


def test_case_15():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_vertex(weighted_graph_0)
    var_1 = weighted_graph_0.add_edge(weighted_graph_0, var_0)
    assert len(weighted_graph_0.vertices) == 2


def test_case_16():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_edge(weighted_graph_0, weighted_graph_0)


@pytest.mark.xfail(strict=True)
def test_case_17():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_vertex(weighted_graph_0)
    weighted_graph_node_0 = module_0.WeightedGraphNode(var_0)
    var_1 = weighted_graph_0.remove_edge(weighted_graph_0, weighted_graph_node_0)
    weighted_graph_0.__str__()


def test_case_18():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_vertex(weighted_graph_0)
    var_1 = weighted_graph_0.remove_edge(weighted_graph_0, weighted_graph_0)


def test_case_19():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.add_edge(weighted_graph_0, weighted_graph_0)
    var_1 = weighted_graph_0.remove_edge(weighted_graph_0, weighted_graph_0)


def test_case_20():
    weighted_graph_0 = module_0.WeightedGraph()
    var_0 = weighted_graph_0.remove_edge(weighted_graph_0, weighted_graph_0)


def test_case_21():
    weighted_graph_0 = module_0.WeightedGraph()


def test_case_22():
    bool_0 = False
    graph_node_0 = module_0.GraphNode(bool_0)


def test_case_23():
    bool_0 = False
    graph_node_0 = module_0.GraphNode(bool_0)
    var_0 = graph_node_0.add_adjacent(bool_0)


@pytest.mark.xfail(strict=True)
def test_case_24():
    none_type_0 = None
    graph_node_0 = module_0.GraphNode(none_type_0)
    graph_node_0.remove_adjacent(none_type_0)


def test_case_25():
    bool_0 = False
    graph_0 = module_0.Graph(bool_0)


def test_case_26():
    weighted_graph_0 = module_0.WeightedGraph()
    weighted_graph_node_0 = module_0.WeightedGraphNode(weighted_graph_0)


@pytest.mark.xfail(strict=True)
def test_case_27():
    bool_0 = False
    weighted_graph_node_0 = module_0.WeightedGraphNode(bool_0)
    weighted_graph_node_0.remove_adjacent(bool_0)
