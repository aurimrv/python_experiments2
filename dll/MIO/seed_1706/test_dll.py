# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import dll as module_0


def test_case_0():
    bytes_0 = b"\x0f\xa4\x99\xb3\xd0\x87\xcf\xdb\x0cS\x1c "
    double_linked_list_0 = module_0.DoubleLinkedList(bytes_0)
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )


def test_case_1():
    dict_0 = {}
    double_linked_list_0 = module_0.DoubleLinkedList(dict_0)


def test_case_2():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
    assert (
        f"{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}"
        == "dll.Node"
    )


def test_case_3():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None


def test_case_4():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )


def test_case_5():
    str_0 = "*ry}BM"
    double_linked_list_0 = module_0.DoubleLinkedList(str_0)
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    var_0 = double_linked_list_0.pop()
    assert var_0 == "M"


def test_case_6():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    var_1 = double_linked_list_0.pop()
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dll.DoubleLinkedList"
    )
    assert var_1.head is None
    assert var_1.tail is None


def test_case_7():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.pop()


def test_case_8():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )


def test_case_9():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    var_1 = double_linked_list_0.append(var_0)


def test_case_10():
    str_0 = "cR4K"
    double_linked_list_0 = module_0.DoubleLinkedList(str_0)
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    var_0 = double_linked_list_0.shift()
    assert var_0 == "c"


def test_case_11():
    node_0 = module_0.Node()
    double_linked_list_0 = module_0.DoubleLinkedList(node_0)
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    var_0 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert f"{type(var_0).__module__}.{type(var_0).__qualname__}" == "dll.Node"
    assert var_0.data is None
    assert var_0.next is None
    assert var_0.prev is None


def test_case_12():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(IndexError):
        double_linked_list_0.shift()


def test_case_13():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    double_linked_list_1 = module_0.DoubleLinkedList(double_linked_list_0)
    assert (
        f"{type(double_linked_list_1).__module__}.{type(double_linked_list_1).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_1.head).__module__}.{type(double_linked_list_1.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_1.tail).__module__}.{type(double_linked_list_1.tail).__qualname__}"
        == "dll.Node"
    )
    var_0 = double_linked_list_1.remove(double_linked_list_0)
    assert double_linked_list_1.head is None
    assert double_linked_list_1.tail is None


@pytest.mark.xfail(strict=True)
def test_case_14():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.append(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    var_1 = double_linked_list_0.shift()
    assert double_linked_list_0.tail is None
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(var_1.head).__module__}.{type(var_1.head).__qualname__}" == "dll.Node"
    )
    assert var_1.tail is None
    double_linked_list_0.remove(double_linked_list_0)


def test_case_15():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    var_1 = double_linked_list_0.push(var_0)
    var_2 = double_linked_list_0.remove(double_linked_list_0)


def test_case_16():
    bytes_0 = b"\xc2\x15\t\x8f\xd4\x9f\xd6\xe6\xeb"
    double_linked_list_0 = module_0.DoubleLinkedList(bytes_0)
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert (
        f"{type(double_linked_list_0.head).__module__}.{type(double_linked_list_0.head).__qualname__}"
        == "dll.Node"
    )
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    with pytest.raises(ValueError):
        double_linked_list_0.remove(double_linked_list_0)


def test_case_17():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    with pytest.raises(ValueError):
        double_linked_list_0.remove(var_0)


def test_case_18():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    var_0 = double_linked_list_0.push(double_linked_list_0)
    assert (
        f"{type(double_linked_list_0.tail).__module__}.{type(double_linked_list_0.tail).__qualname__}"
        == "dll.Node"
    )
    none_type_0 = None
    var_1 = double_linked_list_0.append(none_type_0)
    var_2 = double_linked_list_0.push(var_0)
    var_3 = double_linked_list_0.remove(double_linked_list_0)


def test_case_19():
    double_linked_list_0 = module_0.DoubleLinkedList()
    assert (
        f"{type(double_linked_list_0).__module__}.{type(double_linked_list_0).__qualname__}"
        == "dll.DoubleLinkedList"
    )
    assert double_linked_list_0.head is None
    assert double_linked_list_0.tail is None
    with pytest.raises(ValueError):
        double_linked_list_0.remove(double_linked_list_0)


def test_case_20():
    node_0 = module_0.Node()


def test_case_21():
    node_0 = module_0.Node()
    var_0 = node_0.__repr__()
    assert var_0 == "Value: None"
