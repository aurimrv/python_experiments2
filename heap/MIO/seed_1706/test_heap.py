# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import heap as module_0


def test_case_0():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    int_0 = -2231
    int_1 = -193
    var_0 = heap_0.insert(int_1)
    assert heap_0.heap_list == [0, -193]
    var_1 = heap_0.insert(int_0)
    assert heap_0.heap_list == [0, -2231, -193]


def test_case_1():
    float_0 = 718.6987533135533
    list_0 = [
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
    ]
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.build(list_0)
    assert len(heap_0.heap_list) == 68
    var_1 = heap_0.insert(float_0)


@pytest.mark.xfail(strict=True)
def test_case_2():
    float_0 = 2294.8663438000735
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    heap_0.percolate(float_0)


def test_case_3():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.insert(heap_0)


@pytest.mark.xfail(strict=True)
def test_case_4():
    float_0 = 2417.2654820225125
    bool_0 = True
    list_0 = [float_0, bool_0]
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.build(list_0)
    assert len(heap_0.heap_list) == 3
    heap_0.build(var_0)


def test_case_5():
    float_0 = 1953.244
    list_0 = [
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
    ]
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.build(list_0)
    assert len(heap_0.heap_list) == 91


def test_case_6():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    bool_0 = True
    var_0 = heap_0.sift(bool_0)


def test_case_7():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    bool_0 = False
    var_0 = heap_0.find_min_child_index(bool_0)
    assert var_0 == 0


def test_case_8():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    int_0 = 1942
    var_0 = heap_0.find_min_child_index(int_0)


def test_case_9():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.insert(heap_0)
    var_1 = heap_0.min()
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "heap.Heap"
    assert (
        f"{type(var_1.heap_list).__module__}.{type(var_1.heap_list).__qualname__}"
        == "builtins.list"
    )
    assert len(var_1.heap_list) == 2


def test_case_10():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.min()


def test_case_11():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.insert(heap_0)
    var_1 = heap_0.delete_min()
    assert heap_0.heap_list == [0]
    assert f"{type(var_1).__module__}.{type(var_1).__qualname__}" == "heap.Heap"
    assert var_1.heap_list == [0]


def test_case_12():
    float_0 = -2784.523889002485
    list_0 = [
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
        float_0,
    ]
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.build(list_0)
    assert len(heap_0.heap_list) == 80
    var_1 = heap_0.delete_min()
    assert var_1 == pytest.approx(-2784.523889002485, abs=0.01, rel=0.01)
    assert len(heap_0.heap_list) == 79


def test_case_13():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    var_0 = heap_0.delete_min()


def test_case_14():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
    list_0 = []
    var_0 = heap_0.build(list_0)


def test_case_15():
    heap_0 = module_0.Heap()
    assert heap_0.heap_list == [0]
