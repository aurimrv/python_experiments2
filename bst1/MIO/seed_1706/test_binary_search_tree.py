# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import binary_search_tree as module_0
import tree_node as module_1


@pytest.mark.xfail(strict=True)
def test_case_0():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    binary_search_tree_0.insert(binary_search_tree_0)


def test_case_1():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )


def test_case_2():
    int_0 = 4059
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(int_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.insert(int_0)
    var_2 = binary_search_tree_0.insert(int_0)


def test_case_3():
    int_0 = 4039
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(int_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.insert(int_0)


def test_case_4():
    int_0 = 4039
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(int_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.merge(binary_search_tree_0)
    var_2 = binary_search_tree_0.insert(int_0)


def test_case_5():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.search(binary_search_tree_0)
    assert (
        f"{type(var_1).__module__}.{type(var_1).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    assert var_1.left is None
    assert var_1.right is None
    assert (
        f"{type(var_1.value).__module__}.{type(var_1.value).__qualname__}"
        == "binary_search_tree.BinarySearchTree"
    )
    assert var_1.parent is None


@pytest.mark.xfail(strict=True)
def test_case_6():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    binary_search_tree_0.search(var_0)


def test_case_7():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.search(binary_search_tree_0)


def test_case_8():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.in_order_traversal()


def test_case_9():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.in_order_traversal()


@pytest.mark.xfail(strict=True)
def test_case_10():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    binary_search_tree_0.merge(binary_search_tree_0)


def test_case_11():
    binary_search_tree_0 = module_0.BinarySearchTree()
    binary_search_tree_1 = module_0.BinarySearchTree()
    none_type_0 = None
    var_0 = binary_search_tree_0.insert(none_type_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.min()
    var_2 = binary_search_tree_0.merge(binary_search_tree_1)
    var_3 = binary_search_tree_0.search(var_0)
    assert (
        f"{type(var_3).__module__}.{type(var_3).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    assert var_3.left is None
    assert var_3.right is None
    assert var_3.value is None
    assert var_3.parent is None
    binary_tree_node_0 = module_1.BinaryTreeNode(var_0, var_0)


def test_case_12():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.merge(binary_search_tree_0)


def test_case_13():
    binary_search_tree_0 = module_0.BinarySearchTree()


def test_case_14():
    binary_search_tree_0 = module_0.BinarySearchTree()
    var_0 = binary_search_tree_0.insert(binary_search_tree_0)
    assert (
        f"{type(binary_search_tree_0.head).__module__}.{type(binary_search_tree_0.head).__qualname__}"
        == "tree_node.BinaryTreeNode"
    )
    var_1 = binary_search_tree_0.min()


@pytest.mark.xfail(strict=True)
def test_case_15():
    binary_search_tree_0 = module_0.BinarySearchTree()
    binary_search_tree_0.delete(binary_search_tree_0)
