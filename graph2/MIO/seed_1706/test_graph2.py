# Test cases automatically generated by Pynguin (https://www.pynguin.eu).
# Please check them before you use them.
import pytest
import graph2 as module_0


def test_case_0():
    str_0 = "LV@!KK"
    graph_0 = module_0.Graph(str_0)
    assert graph_0.graph == {"L": {*()}, "V": {*()}, "@": {*()}, "!": {*()}, "K": {*()}}


@pytest.mark.xfail(strict=True)
def test_case_1():
    int_0 = -2788
    module_0.Graph(int_0)


def test_case_2():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}


def test_case_3():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_node(graph_0)
    var_1 = graph_0.edges()


def test_case_4():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.edges()


@pytest.mark.xfail(strict=True)
def test_case_5():
    none_type_0 = None
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_edge(graph_0, none_type_0)
    var_1 = graph_0.add_edge(none_type_0, none_type_0)
    var_2 = graph_0.edges()
    var_0.edges()


@pytest.mark.xfail(strict=True)
def test_case_6():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    none_type_0 = None
    var_0 = graph_0.add_edge(none_type_0, graph_0)
    var_1 = graph_0.del_node(none_type_0)
    var_1.adjacent(none_type_0, var_0)


def test_case_7():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.nodes()


def test_case_8():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_edge(graph_0, graph_0)


@pytest.mark.xfail(strict=True)
def test_case_9():
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    graph_0.del_edge(graph_0, graph_0)


@pytest.mark.xfail(strict=True)
def test_case_10():
    none_type_0 = None
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_node(none_type_0)
    var_1 = graph_0.adjacent(none_type_0, none_type_0)
    assert var_1 is False
    var_2 = graph_0.has_node(none_type_0)
    assert var_2 is True
    var_1.adjacent(none_type_0, var_1)


@pytest.mark.xfail(strict=True)
def test_case_11():
    str_0 = '"#)Fv.=j|=\\~'
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    graph_0.neighbors(str_0)


def test_case_12():
    int_0 = -1673
    none_type_0 = None
    graph_0 = module_0.Graph()
    assert f"{type(graph_0).__module__}.{type(graph_0).__qualname__}" == "graph2.Graph"
    assert graph_0.graph == {}
    var_0 = graph_0.add_edge(none_type_0, none_type_0)
    var_1 = graph_0.adjacent(var_0, int_0)
    assert var_1 is False
