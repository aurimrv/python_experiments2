import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_case1(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('C', 'D', 3)
        
        src = 'A'
        dst = 'D'
        
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']
    
    def test_shortest_path_case2(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'D', 3)
        weighted_graph.add_edge('A', 'C', 2)
        weighted_graph.add_edge('C', 'D', 2)
        
        src = 'A'
        dst = 'D'
        
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']
    
    def test_shortest_path_case3(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        
        src = 'A'
        dst = 'C'
        
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']