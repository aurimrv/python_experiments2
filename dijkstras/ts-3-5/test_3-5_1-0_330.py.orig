import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class WeightedGraph:
    def __init__(self, vertices):
        self.vertices = vertices

class Vertex:
    def __init__(self, adjacent):
        self.adjacent = adjacent

def test_dijkstras_simple():
    # Simple test case
    v1 = Vertex({'A': 2, 'B': 1})
    v2 = Vertex({'A': 3, 'B': 2, 'C': 1})
    v3 = Vertex({'B': 3, 'C': 2})
    
    weighted_graph = WeightedGraph({'A': v1, 'B': v2, 'C': v3})
    
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

def test_dijkstras_no_path():
    # Test case where no path exists
    v1 = Vertex({'B': 1})
    v2 = Vertex({'A': 2})
    
    weighted_graph = WeightedGraph({'A': v1, 'B': v2})
    
    assert dijkstras(weighted_graph, 'A', 'B') == []

def test_dijkstras_single_vertex():
    # Test case with only one vertex
    v1 = Vertex({})
    
    weighted_graph = WeightedGraph({'A': v1})
    
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

def test_dijkstras_multiple_paths():
    # Test case with multiple possible paths
    v1 = Vertex({'B': 1, 'C': 2})
    v2 = Vertex({'C': 3})
    v3 = Vertex({'D': 1})
    v4 = Vertex({'D': 2})
    
    weighted_graph = WeightedGraph({'A': v1, 'B': v2, 'C': v3, 'D': v4})
    
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'C', 'D']