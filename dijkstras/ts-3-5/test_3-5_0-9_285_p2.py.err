import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras
from weighted_graph import WeightedGraph

class TestDijkstras:
    
    def test_shortest_path_basic(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")

        weighted_graph.add_edge("A", "B", 2)
        weighted_graph.add_edge("B", "C", 3)
        weighted_graph.add_edge("A", "C", 7)

        assert dijkstras(weighted_graph, "A", "C") == ["A", "B", "C"]

    def test_shortest_path_same_source_and_destination(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")

        weighted_graph.add_edge("A", "B", 5)

        assert dijkstras(weighted_graph, "A", "A") == ["A"]

    def test_shortest_path_no_path_exists(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")

        weighted_graph.add_edge("A", "B", 2)
        weighted_graph.add_edge("B", "C", 3)

        assert dijkstras(weighted_graph, "A", "C") == []

    def test_shortest_path_path_with_multiple_edges(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")
        weighted_graph.add_vertex("D")

        weighted_graph.add_edge("A", "B", 1)
        weighted_graph.add_edge("B", "C", 2)
        weighted_graph.add_edge("C", "D", 3)
        weighted_graph.add_edge("A", "D", 5)

        assert dijkstras(weighted_graph, "A", "D") == ["A", "B", "C", "D"] 