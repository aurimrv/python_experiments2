import pytest
import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_shortest_path_basic(self):
        weighted_graph = {
            'A': {'B': 3, 'C': 4},
            'B': {'A': 3, 'C': 1, 'D': 7},
            'C': {'A': 4, 'B': 1, 'D': 2},
            'D': {'B': 7, 'C': 2}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'D']

    def test_dijkstras_shortest_path_no_path(self):
        weighted_graph = {
            'A': {'B': 3, 'C': 4},
            'B': {'A': 3, 'C': 1, 'D': 7},
            'C': {'A': 4, 'B': 1},
            'D': {'B': 7, 'C': 2}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'C', 'No path']

    def test_dijkstras_shortest_path_same_source_dest(self):
        weighted_graph = {
            'A': {'B': 3, 'C': 4},
            'B': {'A': 3, 'C': 1, 'D': 7},
            'C': {'A': 4, 'B': 1},
            'D': {'B': 7, 'C': 2}
        }
        src = 'A'
        dst = 'A'
        assert dijkstras(weighted_graph, src, dst) == ['A']

    def test_dijkstras_shortest_path_negative_weights(self):
        weighted_graph = {
            'A': {'B': -3, 'C': 4},
            'B': {'A': -3, 'C': 1, 'D': 7},
            'C': {'A': 4, 'B': 1},
            'D': {'B': 7, 'C': 2}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    def test_dijkstras_shortest_path_empty_graph(self):
        weighted_graph = {}
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == 'No vertices in the graph'