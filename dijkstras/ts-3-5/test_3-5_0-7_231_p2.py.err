import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 2)
    weighted_graph.add_edge('C', 'D', 3)

    src = 'A'
    dst = 'D'

    path = dijkstras(weighted_graph, src, dst)
    assert path == ['A', 'B', 'C', 'D']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_vertex('D')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('C', 'D', 3)

    src = 'A'
    dst = 'D'

    path = dijkstras(weighted_graph, src, dst)
    assert path == []

def test_dijkstras_same_source_destination():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 1)

    src = 'A'
    dst = 'A'

    path = dijkstras(weighted_graph, src, dst)
    assert path == ['A']

def test_dijkstras_disconnected_graph():
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')

    src = 'A'
    dst = 'C'

    path = dijkstras(weighted_graph, src, dst)
    assert path == []