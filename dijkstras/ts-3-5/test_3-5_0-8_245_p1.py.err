import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_shortest_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")
        weighted_graph.add_vertex("D")
        weighted_graph.add_edge("A", "B", 5)
        weighted_graph.add_edge("A", "C", 3)
        weighted_graph.add_edge("B", "D", 2)
        weighted_graph.add_edge("C", "D", 1)
        
        assert dijkstras(weighted_graph, "A", "D") == ["A", "C", "D"]

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")
        weighted_graph.add_vertex("D")
        weighted_graph.add_edge("A", "B", 5)
        weighted_graph.add_edge("A", "C", 3)
        weighted_graph.add_edge("B", "D", 2)
        
        assert dijkstras(weighted_graph, "A", "D") == []

    def test_dijkstras_same_node(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        
        assert dijkstras(weighted_graph, "A", "A") == ["A"]

class WeightedGraph:
    def __init__(self):
        self.vertices = {}
    
    def add_vertex(self, vertex):
        self.vertices[vertex] = Vertex()
    
    def add_edge(self, src, dst, weight):
        self.vertices[src].adjacent[dst] = weight

class Vertex:
    def __init__(self):
        self.adjacent = {} 
