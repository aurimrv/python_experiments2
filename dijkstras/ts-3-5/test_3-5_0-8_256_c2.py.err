import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras, WeightedGraph, Vertex

import pytest

@pytest.fixture
def weighted_graph():
    # Create a sample weighted graph for testing
    graph = WeightedGraph()
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    v4 = Vertex('D')

    v1.add_neighbor(v2, 1)
    v1.add_neighbor(v3, 3)
    v2.add_neighbor(v3, 1)
    v2.add_neighbor(v4, 4)
    v3.add_neighbor(v4, 1)

    graph.add_vertex(v1)
    graph.add_vertex(v2)
    graph.add_vertex(v3)
    graph.add_vertex(v4)

    return graph

def test_dijkstras_shortest_path(weighted_graph):
    path = dijkstras(weighted_graph, 'A', 'D')
    assert path == ['A', 'B', 'C', 'D']

def test_dijkstras_shortest_path2(weighted_graph):
    path = dijkstras(weighted_graph, 'A', 'C')
    assert path == ['A', 'B', 'C']

def test_dijkstras_shortest_path3(weighted_graph):
    path = dijkstras(weighted_graph, 'B', 'D')
    assert path == ['B', 'C', 'D']

def test_dijkstras_shortest_path4(weighted_graph):
    path = dijkstras(weighted_graph, 'B', 'C')
    assert path == ['B', 'C']

def test_dijkstras_shortest_path5(weighted_graph):
    path = dijkstras(weighted_graph, 'C', 'D')
    assert path == ['C', 'D']

def test_dijkstras_shortest_path6(weighted_graph):
    path = dijkstras(weighted_graph, 'C', 'A')
    assert path == ['C', 'B', 'A']