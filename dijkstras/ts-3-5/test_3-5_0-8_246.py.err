import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_basic_scenario():
    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    vertex_a = Vertex({'b': 2, 'c': 4})
    vertex_b = Vertex({'a': 2, 'c': 1})
    vertex_c = Vertex({'a': 4, 'b': 1})
    vertices = {'a': vertex_a, 'b': vertex_b, 'c': vertex_c}
    weighted_graph = WeightedGraph(vertices)

    src = 'a'
    dst = 'c'
    
    result = dijkstras(weighted_graph, src, dst)
    
    assert result == ['a', 'b', 'c']

def test_dijkstras_same_source_and_destination():
    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    vertex_a = Vertex({'b': 2, 'c': 4})
    vertex_b = Vertex({'a': 2, 'c': 1})
    vertex_c = Vertex({'a': 4, 'b': 1})
    vertices = {'a': vertex_a, 'b': vertex_b, 'c': vertex_c}
    weighted_graph = WeightedGraph(vertices)

    src = 'a'
    dst = 'a'
    
    result = dijkstras(weighted_graph, src, dst)
    
    assert result == ['a']

def test_dijkstras_unreachable_destination():
    class WeightedGraph:
        def __init__(self, vertices):
            self.vertices = vertices

    class Vertex:
        def __init__(self, adjacent):
            self.adjacent = adjacent

    vertex_a = Vertex({'b': 2, 'c': 4})
    vertex_b = Vertex({'a': 2, 'c': 1})
    vertex_c = Vertex({'a': 4, 'b': 1})
    vertices = {'a': vertex_a, 'b': vertex_b, 'c': vertex_c}
    weighted_graph = WeightedGraph(vertices)

    src = 'a'
    dst = 'd'
    
    result = dijkstras(weighted_graph, src, dst)
    
    assert result == []  # No path exists
