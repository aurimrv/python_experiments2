import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras
from dijkstras import WeightedGraph

class TestDijkstras:

    def test_shortest_path_1(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')

        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('A', 'C', 4)

        src = 'A'
        dst = 'C'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'B', 'C']

    def test_shortest_path_2(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')

        weighted_graph.add_edge('A', 'B', 2)
        weighted_graph.add_edge('B', 'C', 1)
        weighted_graph.add_edge('A', 'D', 3)
        weighted_graph.add_edge('D', 'C', 2)

        src = 'A'
        dst = 'C'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['A', 'D', 'C']

    def test_shortest_path_3(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')

        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('A', 'C', 4)

        src = 'B'
        dst = 'C'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['B', 'C']

    def test_shortest_path_4(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')

        weighted_graph.add_edge('A', 'B', 2)
        weighted_graph.add_edge('B', 'C', 1)
        weighted_graph.add_edge('A', 'D', 3)
        weighted_graph.add_edge('D', 'C', 2)

        src = 'B'
        dst = 'D'
        result = dijkstras(weighted_graph, src, dst)
        assert result == ['B', 'C', 'D']