import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)
from dijkstras import dijkstras

def test_dijkstras_basic():
    class Vertex:
        def __init__(self, value):
            self.value = value
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex('A'),
        'B': Vertex('B'),
        'C': Vertex('C'),
        'D': Vertex('D')
    }
    graph.vertices['A'].adjacent = {'B': 1, 'C': 4}
    graph.vertices['B'].adjacent = {'A': 1, 'C': 2, 'D': 5}
    graph.vertices['C'].adjacent = {'A': 4, 'B': 2, 'D': 1}
    graph.vertices['D'].adjacent = {'B': 5, 'C': 1}

    path = dijkstras(graph, 'A', 'D')
    assert path == ['A', 'C', 'D']

def test_dijkstras_same_src_dst():
    class Vertex:
        def __init__(self, value):
            self.value = value
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'X': Vertex('X'),
        'Y': Vertex('Y')
    }
    graph.vertices['X'].adjacent = {'Y': 3}
    graph.vertices['Y'].adjacent = {'X': 3}

    path = dijkstras(graph, 'X', 'X')
    assert path == ['X']

def test_dijkstras_unreachable_dst():
    class Vertex:
        def __init__(self, value):
            self.value = value
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    graph.vertices = {
        'P': Vertex('P'),
        'Q': Vertex('Q'),
        'R': Vertex('R')
    }
    graph.vertices['P'].adjacent = {'Q': 2}
    graph.vertices['Q'].adjacent = {'P': 2}

    path = dijkstras(graph, 'P', 'R')
    assert path == []