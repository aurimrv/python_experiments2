import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import WeightedGraph, Vertex, dijkstras

import pytest

# Test cases for dijkstras method

def test_dijkstras_shortest_path_when_path_exists():
    # Given
    graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    vertex_d = Vertex('D')
    
    graph.add_vertex(vertex_a)
    graph.add_vertex(vertex_b)
    graph.add_vertex(vertex_c)
    graph.add_vertex(vertex_d)
    
    graph.add_edge(vertex_a, vertex_b, 1)
    graph.add_edge(vertex_a, vertex_c, 4)
    graph.add_edge(vertex_b, vertex_c, 2)
    graph.add_edge(vertex_b, vertex_d, 5)
    graph.add_edge(vertex_c, vertex_d, 1)
    
    # When
    path = dijkstras(graph, 'A', 'D')
    
    # Then
    assert path == ['A', 'B', 'C', 'D']

def test_dijkstras_shortest_path_when_direct_path_exists():
    # Given
    graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    
    graph.add_vertex(vertex_a)
    graph.add_vertex(vertex_b)
    
    graph.add_edge(vertex_a, vertex_b, 2)
    
    # When
    path = dijkstras(graph, 'A', 'B')
    
    # Then
    assert path == ['A', 'B']

def test_dijkstras_shortest_path_when_no_path_exists():
    # Given
    graph = WeightedGraph()
    vertex_a = Vertex('A')
    vertex_b = Vertex('B')
    vertex_c = Vertex('C')
    
    graph.add_vertex(vertex_a)
    graph.add_vertex(vertex_b)
    graph.add_vertex(vertex_c)
    
    graph.add_edge(vertex_a, vertex_b, 1)
    graph.add_edge(vertex_c, vertex_b, 2)
    
    # When
    path = dijkstras(graph, 'A', 'C')
    
    # Then
    assert path == ['A', 'B', 'C']

def test_dijkstras_shortest_path_when_single_node_graph():
    # Given
    graph = WeightedGraph()
    vertex_a = Vertex('A')
    
    graph.add_vertex(vertex_a)
    
    # When
    path = dijkstras(graph, 'A', 'A')
    
    # Then
    assert path == ['A']