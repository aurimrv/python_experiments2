import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_dijkstras_shortest_path_case1(self):
        weighted_graph = {}  # Define a sample weighted graph
        src = 'A'  # Define source vertex
        dst = 'D'  # Define destination vertex
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']
    
    def test_dijkstras_shortest_path_case2(self):
        weighted_graph = {}  # Define a sample weighted graph
        src = 'A'  # Define source vertex
        dst = 'C'  # Define destination vertex
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']
    
    def test_dijkstras_shortest_path_case3(self):
        weighted_graph = {}  # Define a sample weighted graph
        src = 'A'  # Define source vertex
        dst = 'E'  # Define destination vertex
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D', 'E']
    
    def test_dijkstras_shortest_path_case4(self):
        weighted_graph = {}  # Define a sample weighted graph
        src = 'B'  # Define source vertex
        dst = 'D'  # Define destination vertex
        assert dijkstras(weighted_graph, src, dst) == ['B', 'C', 'D']
    
    def test_dijkstras_shortest_path_case5(self):
        weighted_graph = {}  # Define a sample weighted graph
        src = 'C'  # Define source vertex
        dst = 'E'  # Define destination vertex
        assert dijkstras(weighted_graph, src, dst) == ['C', 'D', 'E']