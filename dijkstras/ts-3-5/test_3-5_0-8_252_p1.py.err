import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    weighted_graph = {
        'A': {'B': 5, 'D': 9, 'E': 2},
        'B': {'A': 5, 'C': 2},
        'C': {'B': 2, 'D': 3},
        'D': {'A': 9, 'C': 3, 'E': 4},
        'E': {'A': 2, 'D': 4}
    }

    src = 'A'
    dst = 'C'
    expected_path = ['A', 'E', 'D', 'C']
    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_multiple_paths():
    weighted_graph = {
        'A': {'B': 5, 'D': 9, 'E': 2},
        'B': {'A': 5, 'C': 2},
        'C': {'B': 2, 'D': 3, 'E': 1},
        'D': {'A': 9, 'C': 3, 'E': 4},
        'E': {'A': 2, 'D': 4, 'C': 1}
    }

    src = 'A'
    dst = 'C'
    expected_path = ['A', 'E', 'C']
    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_no_path():
    weighted_graph = {
        'A': {'B': 5},
        'B': {'A': 5},
        'C': {}
    }

    src = 'A'
    dst = 'C'
    expected_path = []
    assert dijkstras(weighted_graph, src, dst) == expected_path

def test_dijkstras_single_vertex_graph():
    weighted_graph = {
        'A': {}
    }

    src = 'A'
    dst = 'A'
    expected_path = ['A']
    assert dijkstras(weighted_graph, src, dst) == expected_path