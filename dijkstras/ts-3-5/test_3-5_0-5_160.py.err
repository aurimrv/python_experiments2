import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path from A to C in a simple graph
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex()
    }
    graph.vertices['A'].adjacent = {'B': 1, 'C': 3}
    graph.vertices['B'].adjacent = {'C': 1}
    
    assert dijkstras(graph, 'A', 'C') == ['A', 'B', 'C']
    
    # Test case 2: Shortest path from A to D in a complex graph
    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex(),
        'D': Vertex()
    }
    graph.vertices['A'].adjacent = {'B': 1, 'C': 3}
    graph.vertices['B'].adjacent = {'C': 1, 'D': 2}
    graph.vertices['C'].adjacent = {'D': 1}
    
    assert dijkstras(graph, 'A', 'D') == ['A', 'B', 'D']

    # Test case 3: Shortest path from A to B in a graph with equal distances
    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex()
    }
    graph.vertices['A'].adjacent = {'B': 2, 'C': 2}
    graph.vertices['C'].adjacent = {'B': 2}
    
    assert dijkstras(graph, 'A', 'B') == ['A', 'B']

    # Test case 4: Shortest path from A to E in a disconnected graph
    graph = WeightedGraph()
    graph.vertices = {
        'A': Vertex(),
        'B': Vertex(),
        'C': Vertex(),
        'D': Vertex(),
        'E': Vertex()
    }
    graph.vertices['A'].adjacent = {'B': 1, 'C': 3}
    graph.vertices['B'].adjacent = {'C': 1}
    graph.vertices['D'].adjacent = {'E': 2}
    
    assert dijkstras(graph, 'A', 'E') == []