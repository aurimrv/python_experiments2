import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class Vertex:
    def __init__(self, name):
        self.name = name
        self.adjacent = {}

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

def test_dijkstras_single_node():
    graph = WeightedGraph()
    graph.vertices['A'] = Vertex('A')

    result = dijkstras(graph, 'A', 'A')
    assert result == ['A']

def test_dijkstras_unreachable():
    graph = WeightedGraph()
    graph.vertices['A'] = Vertex('A')
    graph.vertices['B'] = Vertex('B')

    result = dijkstras(graph, 'A', 'B')
    assert result == []

def test_dijkstras_simple_path():
    graph = WeightedGraph()
    graph.vertices['A'] = Vertex('A')
    graph.vertices['B'] = Vertex('B')
    graph.vertices['C'] = Vertex('C')

    graph.vertices['A'].adjacent['B'] = 1
    graph.vertices['B'].adjacent['C'] = 2

    result = dijkstras(graph, 'A', 'C')
    assert result == ['A', 'B', 'C']

def test_dijkstras_complex_path():
    graph = WeightedGraph()
    graph.vertices['A'] = Vertex('A')
    graph.vertices['B'] = Vertex('B')
    graph.vertices['C'] = Vertex('C')
    graph.vertices['D'] = Vertex('D')

    graph.vertices['A'].adjacent['B'] = 1
    graph.vertices['B'].adjacent['C'] = 2
    graph.vertices['C'].adjacent['D'] = 3

    result = dijkstras(graph, 'A', 'D')
    assert result == ['A', 'B', 'C', 'D']