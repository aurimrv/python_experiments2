import os
import sys
import pytest

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    
    def test_dijkstras_shortest_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.vertices = {
            'A': Vertex('A', {'B': 1, 'C': 4}),
            'B': Vertex('B', {'A': 1, 'C': 2}),
            'C': Vertex('C', {'B': 2, 'D': 5}),
            'D': Vertex('D', {'C': 5})
        }
        
        src = 'A'
        dst = 'D'
        
        shortest_path = dijkstras(weighted_graph, src, dst)
        assert shortest_path == ['A', 'B', 'C', 'D']
    
    def test_dijkstras_shortest_path_same_source_dest(self):
        weighted_graph = WeightedGraph()
        weighted_graph.vertices = {
            'A': Vertex('A', {'B': 1, 'C': 4}),
            'B': Vertex('B', {'A': 1, 'C': 2}),
            'C': Vertex('C', {'B': 2, 'D': 5}),
            'D': Vertex('D', {'C': 5})
        }
        
        src = 'A'
        dst = 'A'
        
        shortest_path = dijkstras(weighted_graph, src, dst)
        assert shortest_path == ['A']

    def test_dijkstras_shortest_path_unreachable_destination(self):
        weighted_graph = WeightedGraph()
        weighted_graph.vertices = {
            'A': Vertex('A', {'B': 1, 'C': 4}),
            'B': Vertex('B', {'A': 1, 'C': 2}),
            'C': Vertex('C', {'B': 2, 'D': 5}),
            'D': Vertex('D', {'C': 5})
        }
        
        src = 'A'
        dst = 'E'
        
        shortest_path = dijkstras(weighted_graph, src, dst)
        assert shortest_path == []