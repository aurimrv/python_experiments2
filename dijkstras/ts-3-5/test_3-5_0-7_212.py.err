import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test Case 1: Shortest path between two nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 2)
    weighted_graph.add_edge('A', 'C', 4)
    weighted_graph.add_edge('B', 'C', 1)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

    # Test Case 2: Shortest path with negative weights
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', -3)
    assert dijkstras(weighted_graph, 'A', 'B') == ['A', 'B']

    # Test Case 3: Shortest path with same weight edges
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 1)
    weighted_graph.add_edge('B', 'C', 1)
    weighted_graph.add_edge('A', 'C', 2)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

    # Test Case 4: Shortest path with no path between nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 2)
    assert dijkstras(weighted_graph, 'A', 'C') == []

    # Test Case 5: Shortest path with self loop
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_edge('A', 'A', 0)
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

    # Test Case 6: Shortest path in a large graph
    weighted_graph = WeightedGraph()
    for i in range(100):
        weighted_graph.add_vertex(str(i))
    for i in range(99):
        weighted_graph.add_edge(str(i), str(i+1), 1)
    assert dijkstras(weighted_graph, '0', '99') == [str(i) for i in range(100)]

    # Add more test cases as needed