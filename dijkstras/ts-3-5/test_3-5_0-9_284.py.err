import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_shortest_path(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        vertex_a.add_neighbor(vertex_b, 1)
        vertex_b.add_neighbor(vertex_c, 2)
        vertex_c.add_neighbor(vertex_d, 3)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)

        assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'B', 'C', 'D']

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_a.add_neighbor(vertex_b, 1)
        vertex_c.add_neighbor(vertex_b, 2)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)

        assert dijkstras(weighted_graph, 'A', 'C') == []

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        self.vertices[vertex.key] = vertex

class Vertex:
    def __init__(self, key):
        self.key = key
        self.adjacent = {}

    def add_neighbor(self, neighbor, weight):
        self.adjacent[neighbor] = weight