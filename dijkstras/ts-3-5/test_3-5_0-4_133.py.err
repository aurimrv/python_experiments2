import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_shortest_path(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        vertex_a.add_adjacent(vertex_b, 1)
        vertex_a.add_adjacent(vertex_c, 4)
        vertex_b.add_adjacent(vertex_c, 2)
        vertex_b.add_adjacent(vertex_d, 5)
        vertex_c.add_adjacent(vertex_d, 1)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)

        path = dijkstras(weighted_graph, 'A', 'D')
        assert path == ['A', 'C', 'D']

    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        vertex_a.add_adjacent(vertex_b, 1)
        vertex_c.add_adjacent(vertex_d, 1)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)

        path = dijkstras(weighted_graph, 'A', 'D')
        assert path == []

    def test_dijkstras_same_source_and_destination(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        vertex_a.add_adjacent(vertex_b, 1)
        vertex_b.add_adjacent(vertex_c, 2)
        vertex_c.add_adjacent(vertex_d, 3)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)

        path = dijkstras(weighted_graph, 'A', 'A')
        assert path == ['A']

    def test_dijkstras_multiple_paths(self):
        weighted_graph = WeightedGraph()
        vertex_a = Vertex('A')
        vertex_b = Vertex('B')
        vertex_c = Vertex('C')
        vertex_d = Vertex('D')
        vertex_e = Vertex('E')
        vertex_a.add_adjacent(vertex_b, 1)
        vertex_a.add_adjacent(vertex_c, 2)
        vertex_b.add_adjacent(vertex_d, 3)
        vertex_c.add_adjacent(vertex_d, 1)
        vertex_d.add_adjacent(vertex_e, 2)
        weighted_graph.add_vertex(vertex_a)
        weighted_graph.add_vertex(vertex_b)
        weighted_graph.add_vertex(vertex_c)
        weighted_graph.add_vertex(vertex_d)
        weighted_graph.add_vertex(vertex_e)

        path = dijkstras(weighted_graph, 'A', 'E')
        assert path == ['A', 'C', 'D', 'E']