import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    # Define the weighted graph for testing
    class Vertex:
        def __init__(self, name):
            self.name = name
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    a = Vertex('A')
    b = Vertex('B')
    c = Vertex('C')
    d = Vertex('D')
    e = Vertex('E')
    
    a.adjacent = {b: 1, c: 4}
    b.adjacent = {a: 1, c: 2, d: 5}
    c.adjacent = {a: 4, b: 2, d: 1}
    d.adjacent = {b: 5, c: 1, e: 3}
    e.adjacent = {d: 3}
    
    graph.vertices = {'A': a, 'B': b, 'C': c, 'D': d, 'E': e}
    
    assert dijkstras(graph, 'A', 'E') == ['A', 'C', 'D', 'E']

def test_dijkstras_nonexistent_path():
    # Define the weighted graph for testing
    class Vertex:
        def __init__(self, name):
            self.name = name
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    a = Vertex('A')
    b = Vertex('B')
    c = Vertex('C')
    
    a.adjacent = {b: 1}
    b.adjacent = {a: 1}
    
    graph.vertices = {'A': a, 'B': b}
    
    assert dijkstras(graph, 'A', 'C') == []

def test_dijkstras_same_source_and_destination():
    # Define the weighted graph for testing
    class Vertex:
        def __init__(self, name):
            self.name = name
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    a = Vertex('A')
    b = Vertex('B')
    
    a.adjacent = {b: 1}
    b.adjacent = {a: 1}
    
    graph.vertices = {'A': a, 'B': b}
    
    assert dijkstras(graph, 'A', 'A') == ['A']

def test_dijkstras_unreachable_destination():
    # Define the weighted graph for testing
    class Vertex:
        def __init__(self, name):
            self.name = name
            self.adjacent = {}

    class WeightedGraph:
        def __init__(self):
            self.vertices = {}

    graph = WeightedGraph()
    a = Vertex('A')
    b = Vertex('B')
    c = Vertex('C')
    
    a.adjacent = {b: 1}
    
    graph.vertices = {'A': a, 'B': b}
    
    assert dijkstras(graph, 'A', 'C') == []
