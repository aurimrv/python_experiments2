import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class WeightedGraph:
    def __init__(self, vertices):
        self.vertices = vertices

class Vertex:
    def __init__(self, adjacent):
        self.adjacent = adjacent

def test_dijkstras():
    vertices = {
        'A': Vertex({'B': 2}),
        'B': Vertex({}),
        'C': Vertex({}),
        'D': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'B'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    vertices = {
        'A': Vertex({'B': 2, 'C': 5}),
        'B': Vertex({'C': 1, 'D': 3}),
        'C': Vertex({'D': 1}),
        'D': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    vertices = {
        'A': Vertex({'B': 2, 'C': 2}),
        'B': Vertex({'D': 1}),
        'C': Vertex({'D': 1}),
        'D': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']

    vertices = {
        'A': Vertex({'B': 2}),
        'B': Vertex({'A': 2}),
        'C': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']

    vertices = {
        'A': Vertex({}),
        'B': Vertex({}),
        'C': Vertex({}),
        'D': Vertex({})
    }
    weighted_graph = WeightedGraph(vertices)
    src = 'A'
    dst = 'D'
    assert dijkstras(weighted_graph, src, dst) == []