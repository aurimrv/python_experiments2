import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class Adjacent:
    def __init__(self, adjacent):
        self.adjacent = adjacent

def test_dijkstras_basic_case():
    class WeightedGraph:
        vertices = {
            'A': Adjacent({'B': 2, 'C': 4}),
            'B': Adjacent({'A': 2, 'C': 1}),
            'C': Adjacent({'A': 4, 'B': 1})
        }

    src = 'A'
    dst = 'C'

    assert dijkstras(WeightedGraph, src, dst) == ['A', 'C']

def test_dijkstras_multiple_paths_case():
    class WeightedGraph:
        vertices = {
            'A': Adjacent({'B': 2, 'C': 4}),
            'B': Adjacent({'A': 2, 'C': 1, 'D': 3}),
            'C': Adjacent({'A': 4, 'B': 1, 'D': 2}),
            'D': Adjacent({'B': 3, 'C': 2})
        }

    src = 'A'
    dst = 'D'

    assert dijkstras(WeightedGraph, src, dst) == ['A', 'C', 'D']

def test_dijkstras_unreachable_case():
    class WeightedGraph:
        vertices = {
            'A': Adjacent({'B': 2, 'C': 4}),
            'B': Adjacent({'A': 2, 'C': 1}),
            'C': Adjacent({'A': 4, 'B': 1})
        }

    src = 'A'
    dst = 'D'

    assert dijkstras(WeightedGraph, src, dst) == ['A']  # No path exists

def test_dijkstras_same_source_destination():
    class WeightedGraph:
        vertices = {
            'A': Adjacent({'B': 2, 'C': 4}),
            'B': Adjacent({'A': 2, 'C': 1}),
            'C': Adjacent({'A': 4, 'B': 1})
        }

    src = 'A'
    dst = 'A'

    assert dijkstras(WeightedGraph, src, dst) == ['A']  # Same source and destination