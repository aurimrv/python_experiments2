import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras():
    # Test case 1: Shortest path between two connected nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_edge('A', 'B', 5)
    assert dijkstras(weighted_graph, 'A', 'B') == ['A', 'B']

    # Test case 2: Shortest path between two nodes with multiple edges
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 3)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('B', 'C', 1)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'C']

    # Test case 3: Shortest path between two disconnected nodes
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    assert dijkstras(weighted_graph, 'A', 'B') == []

    # Test case 4: Shortest path between two nodes with loops
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 2)
    weighted_graph.add_edge('B', 'C', 3)
    weighted_graph.add_edge('C', 'A', 1)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

    # Test case 5: Shortest path between two nodes with same weight edges
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', 2)
    weighted_graph.add_edge('A', 'C', 2)
    weighted_graph.add_edge('B', 'C', 2)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'C']

    # Test case 6: Shortest path between two nodes with negative weights
    weighted_graph = WeightedGraph()
    weighted_graph.add_vertex('A')
    weighted_graph.add_vertex('B')
    weighted_graph.add_vertex('C')
    weighted_graph.add_edge('A', 'B', -2)
    weighted_graph.add_edge('A', 'C', -3)
    weighted_graph.add_edge('B', 'C', -1)
    assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'C']