import os
import sys
from functools import reduce

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_basic_case(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")
        weighted_graph.add_vertex("D")
        
        weighted_graph.add_edge("A", "B", 1)
        weighted_graph.add_edge("B", "C", 2)
        weighted_graph.add_edge("C", "D", 3)
        
        result = dijkstras(weighted_graph, "A", "D")
        assert result == ["A", "B", "C", "D"]
        
    def test_dijkstras_no_path(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        weighted_graph.add_vertex("C")
        weighted_graph.add_vertex("D")
        
        weighted_graph.add_edge("A", "B", 1)
        weighted_graph.add_edge("C", "D", 3)
        
        result = dijkstras(weighted_graph, "C", "B")
        assert result == []
        
    def test_dijkstras_same_source_dest(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex("A")
        weighted_graph.add_vertex("B")
        
        weighted_graph.add_edge("A", "B", 2)
        
        result = dijkstras(weighted_graph, "A", "A")
        assert result == ["A"]
        
class WeightedGraph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = Vertex(vertex)

    def add_edge(self, from_vertex, to_vertex, weight):
        if from_vertex in self.vertices and to_vertex in self.vertices:
            self.vertices[from_vertex].add_edge(to_vertex, weight)

class Vertex:
    def __init__(self, value):
        self.value = value
        self.adjacent = {}

    def add_edge(self, to_vertex, weight):
        self.adjacent[to_vertex] = weight