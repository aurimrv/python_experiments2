import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_dijkstras_simple_path(self):
        weighted_graph = {
            '1': {'2': 1, '3': 2},
            '2': {'3': 1, '4': 1},
            '3': {'4': 2},
            '4': {}
        }
        src = '1'
        dst = '4'
        assert dijkstras(weighted_graph, src, dst) == ['1', '2', '3', '4']

    def test_dijkstras_no_path(self):
        weighted_graph = {
            '1': {'2': 1, '3': 2},
            '2': {'3': 1, '4': 1},
            '3': {},
            '4': {}
        }
        src = '1'
        dst = '4'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_dijkstras_same_source_and_destination(self):
        weighted_graph = {
            '1': {'2': 1, '3': 2},
            '2': {'3': 1, '4': 1},
            '3': {'4': 2},
            '4': {}
        }
        src = '1'
        dst = '1'
        assert dijkstras(weighted_graph, src, dst) == ['1']

    def test_dijkstras_unreachable_destination(self):
        weighted_graph = {
            '1': {'2': 1, '3': 2},
            '2': {'3': 1, '4': 1},
            '3': {},
            '4': {}
        }
        src = '1'
        dst = '5'
        assert dijkstras(weighted_graph, src, dst) == []

    def test_dijkstras_negative_weights(self):
        weighted_graph = {
            '1': {'2': 1, '3': -2},
            '2': {'3': 1, '4': 1},
            '3': {'4': 2},
            '4': {}
        }
        src = '1'
        dst = '4'
        assert dijkstras(weighted_graph, src, dst) == ['1', '3', '4']