import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    wg = WeightedGraph()
    
    v1 = Vertex()
    v2 = Vertex()
    v3 = Vertex()
    
    v1.adjacent = {v2: 2, v3: 5}
    v2.adjacent = {v1: 2, v3: 2}
    v3.adjacent = {v1: 5, v2: 2}
    
    wg.vertices = {'A': v1, 'B': v2, 'C': v3}
    
    assert dijkstras(wg, 'A', 'C') == ['A', 'B', 'C']
    assert dijkstras(wg, 'A', 'B') == ['A', 'B']
    assert dijkstras(wg, 'B', 'C') == ['B', 'C']
    
def test_dijkstras_unreachable_destination():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    wg = WeightedGraph()
    
    v1 = Vertex()
    v2 = Vertex()
    
    v1.adjacent = {v2: 3}
    v2.adjacent = {v1: 3}
    
    wg.vertices = {'A': v1, 'B': v2}
    
    assert dijkstras(wg, 'A', 'C') == ['A']  # Unreachable destination

def test_dijkstras_same_source_destination():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    wg = WeightedGraph()
    
    v1 = Vertex()
    
    v1.adjacent = {}
    
    wg.vertices = {'A': v1}
    
    assert dijkstras(wg, 'A', 'A') == ['A']

def test_dijkstras_no_path():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    wg = WeightedGraph()
    
    v1 = Vertex()
    v2 = Vertex()
    
    v1.adjacent = {v2: 3}
    v2.adjacent = {v1: 3}
    
    wg.vertices = {'A': v1, 'B': v2}
    
    assert dijkstras(wg, 'A', 'B') == ['A']  # No path from A to B