import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_single_edge(self):
        weighted_graph = {
            'A': {'B': 1},
            'B': {}
        }
        src = 'A'
        dst = 'B'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B']

    def test_shortest_path_multiple_edges(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 2},
            'B': {'C': 1, 'D': 3},
            'C': {'D': 1},
            'D': {}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C', 'D']

    def test_no_path_available(self):
        weighted_graph = {
            'A': {'B': 1},
            'B': {},
            'C': {'D': 2},
            'D': {}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B']  # No path available, should return partial path

    def test_same_source_and_destination(self):
        weighted_graph = {
            'A': {'B': 1},
            'B': {}
        }
        src = 'A'
        dst = 'A'
        assert dijkstras(weighted_graph, src, dst) == ['A']  # Same source and destination

    def test_multiple_paths_same_length(self):
        weighted_graph = {
            'A': {'B': 1, 'C': 2},
            'B': {'D': 3},
            'C': {'D': 3},
            'D': {}
        }
        src = 'A'
        dst = 'D'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']  # Two paths with same length

    def test_graph_with_cycle(self):
        weighted_graph = {
            'A': {'B': 1},
            'B': {'C': 2},
            'C': {'A': 3}
        }
        src = 'A'
        dst = 'C'
        assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']  # Graph with cycle