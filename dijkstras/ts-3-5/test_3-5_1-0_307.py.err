import os
import sys

module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

# Tests for dijkstras function

def test_dijkstras_shortest_path_case1():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    weighted_graph = WeightedGraph()
    
    A = Vertex()
    B = Vertex()
    C = Vertex()
    
    A.adjacent = {B: 2, C: 4}
    B.adjacent = {A: 2, C: 1}
    C.adjacent = {B: 1, A: 4}
    
    weighted_graph.vertices = {'A': A, 'B': B, 'C': C}
    
    src = 'A'
    dst = 'C'
    
    assert dijkstras(weighted_graph, src, dst) == ['A', 'C']


def test_dijkstras_shortest_path_case2():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    weighted_graph = WeightedGraph()
    
    A = Vertex()
    B = Vertex()
    C = Vertex()
    D = Vertex()
    
    A.adjacent = {B: 1, C: 4}
    B.adjacent = {A: 1, C: 2, D: 5}
    C.adjacent = {B: 2, A: 4}
    D.adjacent = {B: 5}
    
    weighted_graph.vertices = {'A': A, 'B': B, 'C': C, 'D': D}
    
    src = 'A'
    dst = 'D'
    
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'D']


def test_dijkstras_no_path_case():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    weighted_graph = WeightedGraph()
    
    A = Vertex()
    B = Vertex()
    C = Vertex()
    
    A.adjacent = {B: 2}
    B.adjacent = {A: 2}
    C.adjacent = {}
    
    weighted_graph.vertices = {'A': A, 'B': B, 'C': C}
    
    src = 'A'
    dst = 'C'
    
    assert dijkstras(weighted_graph, src, dst) == []


def test_dijkstras_same_src_and_dst_case():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    weighted_graph = WeightedGraph()
    
    A = Vertex()
    B = Vertex()
    
    A.adjacent = {B: 2}
    B.adjacent = {A: 2}
    
    weighted_graph.vertices = {'A': A, 'B': B}
    
    src = 'A'
    dst = 'A'
    
    assert dijkstras(weighted_graph, src, dst) == ['A']


def test_dijkstras_single_vertex_graph_case():
    class Vertex:
        def __init__(self):
            self.adjacent = {}
    
    class WeightedGraph:
        def __init__(self):
            self.vertices = {}
    
    weighted_graph = WeightedGraph()
    
    A = Vertex()
    
    A.adjacent = {}
    
    weighted_graph.vertices = {'A': A}
    
    src = 'A'
    dst = 'A'
    
    assert dijkstras(weighted_graph, src, dst) == ['A']
