import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class Vertex:
    def __init__(self, value):
        self.value = value
        self.adjacent = {}

class WeightedGraph:
    def __init__(self):
        self.vertices = {}

def test_dijkstras():
    weighted_graph = WeightedGraph()
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    v1.adjacent = {'B': 2, 'C': 4}
    v2.adjacent = {'A': 2, 'C': 1}
    v3.adjacent = {'A': 4, 'B': 1}
    weighted_graph.vertices = {'A': v1, 'B': v2, 'C': v3}

    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['A', 'B', 'C']

def test_dijkstras_shortest_path():
    weighted_graph = WeightedGraph()
    v1 = Vertex('A')
    v2 = Vertex('B')
    v3 = Vertex('C')
    v1.adjacent = {'B': 2, 'C': 4}
    v2.adjacent = {'A': 2, 'C': 1}
    v3.adjacent = {'A': 4, 'B': 1}
    weighted_graph.vertices = {'A': v1, 'B': v2, 'C': v3}

    src = 'B'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == ['B', 'C']

def test_dijkstras_no_path():
    weighted_graph = WeightedGraph()
    v1 = Vertex('A')
    v2 = Vertex('B')
    v1.adjacent = {'B': 2}
    v2.adjacent = {'A': 2}
    weighted_graph.vertices = {'A': v1, 'B': v2}

    src = 'A'
    dst = 'C'
    assert dijkstras(weighted_graph, src, dst) == []

def test_dijkstras_same_source_dest():
    weighted_graph = WeightedGraph()
    v1 = Vertex('A')
    v1.adjacent = {'A': 2}
    weighted_graph.vertices = {'A': v1}

    src = 'A'
    dst = 'A'
    assert dijkstras(weighted_graph, src, dst) == ['A']