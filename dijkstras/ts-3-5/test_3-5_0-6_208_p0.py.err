import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

class TestDijkstras:
    def test_shortest_path_exists(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

    def test_shortest_path_same_node(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        assert dijkstras(weighted_graph, 'A', 'A') == ['A']

    def test_no_path_exists(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('C', 'B', 2)
        assert dijkstras(weighted_graph, 'A', 'C') == []

    def test_multiple_paths_same_length(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_vertex('D')
        weighted_graph.add_edge('A', 'B', 1)
        weighted_graph.add_edge('B', 'C', 2)
        weighted_graph.add_edge('A', 'D', 1)
        weighted_graph.add_edge('D', 'C', 2)
        assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']

    def test_negative_weights(self):
        weighted_graph = WeightedGraph()
        weighted_graph.add_vertex('A')
        weighted_graph.add_vertex('B')
        weighted_graph.add_vertex('C')
        weighted_graph.add_edge('A', 'B', -1)
        weighted_graph.add_edge('B', 'C', -2)
        assert dijkstras(weighted_graph, 'A', 'C') == ['A', 'B', 'C']