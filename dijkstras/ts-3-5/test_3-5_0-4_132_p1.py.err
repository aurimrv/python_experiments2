import os
import sys
module_dir = os.path.dirname(os.path.abspath(__file__))
project_dir = os.path.abspath(os.path.join(module_dir, '..'))
sys.path.append(project_dir)

from dijkstras import dijkstras

def test_dijkstras_shortest_path():
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'C', 'D']
    assert dijkstras(weighted_graph, 'B', 'D') == ['B', 'C', 'D']

def test_dijkstras_no_path():
    weighted_graph = {
        'A': {'B': 1},
        'B': {'A': 1},
        'C': {'D': 3},
        'D': {'C': 3}
    }
    
    assert dijkstras(weighted_graph, 'A', 'D') == []

def test_dijkstras_same_source_dest():
    weighted_graph = {
        'A': {'B': 1, 'C': 4},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    
    assert dijkstras(weighted_graph, 'A', 'A') == ['A']

def test_dijkstras_large_graph():
    weighted_graph = {
        'A': {'B': 1, 'C': 4, 'D': 2},
        'B': {'A': 1, 'C': 2, 'D': 5},
        'C': {'A': 4, 'B': 2, 'D': 1},
        'D': {'B': 5, 'C': 1}
    }
    
    assert dijkstras(weighted_graph, 'A', 'D') == ['A', 'D']
    assert dijkstras(weighted_graph, 'B', 'D') == ['B', 'C', 'D']